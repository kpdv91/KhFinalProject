<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace=연결되는 인터페이스 -->    
<mapper namespace="com.kh.cat.admin.dao.AdminInter">
	<!-- 글쓰기(등록된 글의 idx 컬럼을 반환해야한다.(몇가지 옵션이 필요하다.)) -->
	<!-- 
		parameterType 지정 (파라메터로 사용될 dto(bean))
		useGenertedKeys = "true" (insert 후 키 생성 여부)
		keyProperty = "idx" (키가 될 필드(dto변수))
		keyColumn = "idx" (키가 저장될 DB 컬럼)
	-->

	<!-- 신고리스트(관리자) -->
	<select id="complainList" resultType="complain">
		SELECT * FROM complain ORDER BY complain_idx
	</select>
	
	<!-- 가게 등록 리스트(관리자) -->
	<select id="storeRegistList" resultType="store">
		SELECT * FROM store ORDER BY store_idx
	</select>
	
	<!-- 신고된 리뷰 리스트 -->
	<select id="comp_reviewList" resultType="review">
		SELECT * FROM review WHERE review_idx = #{param1}
	</select>
	
	<!-- 리뷰 작성자 아이디 조회 -->
	<select id="revWriter" resultType="String" parameterType="String">
		SELECT id FROM review WHERE review_idx = #{param1}
	</select>
	
	<!-- 블랙리스트 추가 -->
	<update id="blackListAdd" parameterType="String">
		UPDATE member SET aut = 'black' WHERE id = #{param1}
	</update>
	
	<!-- 리뷰 삭제 -->
	<delete id="review_del">
		DELETE FROM review WHERE review_idx = #{param1}
	</delete>
	
	
	<!-- 해시태그  -->
	<select id="reviewHash" resultType="hash">
	 	SELECT hash_tag FROM hash WHERE hash_cate='review' AND review_idx = #{param1}
	 </select>
	 
	 <!-- 리뷰 사진 -->
	 <select id="reviewPhoto" resultType="revPhoto">
	 	SELECT revPhoto_photo FROM revPhoto WHERE review_idx = #{param1}
	 </select>
	 
	 <!-- 가게 등록 승인 -->
	<update id="registYes" parameterType="String">
		UPDATE store SET store_regist = 1 WHERE store_idx = #{param1}
	</update>
	
	<!-- 게시물 삭제시 신고당한 사람에게 쪽지 -->
	<insert id="review_del_dm" parameterType="String">
		INSERT INTO dm(dm_idx, id, dm_id, dm_content, dm_date)
			VALUES(seq_dm.NEXTVAL, #{param2}, #{param1}, #{param3}, SYSDATE)
	</insert>
	
	<!-- 게시물 삭제시 신고한 사람에게 쪽지 -->
	<insert id="review_del_dm2" parameterType="String">
		INSERT INTO dm(dm_idx, id, dm_id, dm_content, dm_date)
			VALUES(seq_dm.NEXTVAL, #{param2}, #{param1}, '신고한 게시물이 삭제되었습니다.', SYSDATE)
	</insert>
	
	 
	 <!-- 등록 승인 시 쪽지 -->
	<insert id="regY_dm_Write" parameterType="String">
		INSERT INTO dm(dm_idx, id, dm_id, dm_content, dm_date)
			VALUES(seq_dm.NEXTVAL, #{param2}, #{param1}, '가게등록이 승인되었습니다.', SYSDATE)
	</insert>
	
	<!-- 등록 거절 시 쪽지 -->
	<insert id="regNo_dmWrite" parameterType="String">
		INSERT INTO dm(dm_idx, id, dm_id, dm_content, dm_date)
			VALUES(seq_dm.NEXTVAL, #{param2}, #{param1}, #{param3}, SYSDATE)
	</insert>
	
	<!-- 등록 거절 시 삭제 -->
	<delete id="storeDel" parameterType="String">
		DELETE FROM store WHERE store_idx = #{param1}
	</delete>
	
	<!-- 신고 취하 -->
	<delete id="complainDel">
		DELETE FROM complain WHERE review_idx = #{param1} AND id = #{param2}
	</delete>
</mapper>



















