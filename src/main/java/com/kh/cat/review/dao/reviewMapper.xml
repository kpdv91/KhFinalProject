<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">    
    <!-- namespace = 연결되는 인터페이스 -->
<mapper namespace="com.kh.cat.review.dao.ReviewInter">
	
	<!-- 글쓰기(등록된 글의 idx 컬럼을 반환해야함) -->
	<!-- 키를 bean 에 반환함
		parameterType="com.file.dto.BoardBean" <- 파라메터로 사용될 빈
		useGeneratedKeys="true" <- insert 후 키 생성 여부
		keyProperty="idx" <- 키가 될 필드
		keyColumn="idx" <- 키가 저장될 컬럼
	 -->
	 <insert id="reviewWrite" 
	 	parameterType="review"
	 	useGeneratedKeys="true"
	 	keyProperty="review_idx"
	 	keyColumn="review_idx">
	 	INSERT INTO review(review_idx,id,review_storeName,review_star, review_content, review_likeCnt, review_date, review_profile)
	 		VALUES(seq_review.NEXTVAL,#{id},#{review_storeName},#{review_star},#{review_content},0,SYSDATE,'A')
	 </insert>
	 
	 <insert id="hashtag">
	 	INSERT INTO hash(hash_tag,hash_cate,review_idx)
	 		VALUES(#{param1},'review',#{param2})
	 </insert>
	 
	 <insert id="reviewPhotoWrite">
	 	INSERT INTO revPhoto(review_idx,revPhoto_photo)
	 		VALUES(#{param1},#{param2})
	 </insert>
	 
	 <select id="storeList" resultType="store">
	 	SELECT store_idx, store_name, store_addr 
	 	FROM store WHERE store_name LIKE '%'|| #{param1}||'%'
	 </select>
	 
	 <select id="reviewList" resultType="review">
	 	<choose>
	 		<when test="store_idx==0">
	 			SELECT * FROM review
	 		</when>
	 		<otherwise>
	 			SELECT * FROM review WHERE store_idx= #{store_idx}
	 		</otherwise>
	 	</choose>
	 	<if test="range.equals('최신순')">
	 		ORDER BY review_date DESC
		</if>		
		<if test="range.equals('좋아요순')">
			ORDER BY review_likeCnt DESC
		</if>
	</select>

 	<select id="reviewList_store" resultType="review">
		SELECT * FROM review WHERE store_idx= #{param1} ORDER BY review_date DESC
	 </select>
	 
	 <select id="reviewHash" resultType="hash">
	 	SELECT hash_tag FROM hash WHERE hash_cate='review' AND review_idx = #{param1}
	 </select>
	 
	 <select id="reviewPhoto" resultType="revPhoto">
	 	SELECT revPhoto_photo FROM revPhoto WHERE review_idx = #{param1}
	 </select>
	 
	 <!-- 포인트 적립(사진 미포함 : 50) -->
	 <update id="review_point">
	 	UPDATE member SET pointcnt = pointcnt + 50 WHERE id=#{param1}
	 </update>
	 
	 <!-- 포인트 적립(사진 포함 : 100) -->
	 <update id="photoReview_point">
	 	UPDATE member SET pointcnt = pointcnt + 100 WHERE id=#{param1}
	 </update>
	 
	 <!-- 좋아요 수 조회 -->
	 <select id="review_likeCnt" resultType="Integer">
	 	SELECT review_likecnt FROM review WHERE review_idx= #{param1}
	 </select>
	 
	 <!-- 좋아요 10일 때 포인트 적립 -->
	 <update id="likePoint">
	 	UPDATE member SET pointcnt = pointcnt + 1000 WHERE id=#{param1}
	 </update>
	 
	 <!-- 신고하기 -->
	 <insert id="complain" parameterType="complain">
	 	INSERT INTO complain
	 	<if test="!review_idx.equals('')">
			VALUES(seq_complain.NEXTVAL,#{id},#{complain_id},#{complain_type},#{complain_content},#{complain_cate},SYSDATE,0,#{review_idx},null)
		</if>		
		<if test="review_idx.equals('')">
			VALUES(seq_complain.NEXTVAL,#{id},#{complain_id},#{complain_type},#{complain_content},#{complain_cate},SYSDATE,0,null,#{rev_reply_idx})
		</if>
	 </insert>
	 
	 
	 <!-- 별점수 조회 -->
	 <select id="reviewStar" resultType="Double">
	 	SELECT review_star FROM review WHERE review_idx= #{param1}
	 </select>
	 
	 <!-- 리뷰 삭제 -->
	 <delete id="review_delete">
	 	DELETE FROM review WHERE review_idx = #{param1}
	 </delete>
	 
	 <!-- 리뷰 수정 페이지 -->
	 <select id="review_updateForm" resultType="review">
	 	SELECT * FROM review WHERE review_idx = #{param1}
	 </select>
	 
	 <!-- 리뷰수정 -->
	 <update id="review_update">
	 	UPDATE review SET review_storeName=#{review_storeName}, review_star = #{review_star}, review_content=#{review_content} WHERE review_idx=#{review_idx}
	 </update>
	
	<!-- 해시태그 삭제 -->
	<delete id="review_HashDel">
		DELETE FROM hash WHERE review_idx = #{param1}
	</delete>
	
	<!-- 리뷰 사진 삭제 -->
	<delete id="review_PhotoDel">
		DELETE FROM revPhoto WHERE review_idx = #{param1}
	</delete>
</mapper>